complected video :11
------------------------
Javascript basic advanced 1:
------------------------------
-> It is a programming language that allows us to implement complex 
feature on the pages.
HTML->it is markup language that we use to structure and give meaning to our web
content.
CSS->It is a language of style rules that we used to apply styling to our HTML Content.

Javascript : It is scripting language that enables you to create dynamically updating content.

Syntax Parser :
----------------
A program that reads your code and determines what it does and if it's grammer is valid.

Lexical Environment :
------------------------
Where something sits physically  in the code you write.

function(){
    santanu
    paikaray

}

Execution Context :
------------------------
A wrapper to help manage the code that is running 

Lexical 1
Lexical 2
Lexical 3

Name/Value pairs:
-------------------
A name which maps to a unique value(name:'santanu')

Object:
--------
A collection of these name value pairs.

Global Environmentand Global Object:
-----------------------------------------
Whenever code is running in Javascript it runs inside an execution Context.

Execution Context(Global)
--------------------------
Global Object
this

Global:
Anything outside the function is called global.
var a =12;(global)
function add(){

    var a = 1;(local)

}
add()

Hoisting:
----------------
When you declare variable and function in Javascript, the execution engine 
sets up a memory space for variables and functions.

-> If it is a variable it will keep that variable in momery and assign a default value called
undefined.

-> It is a function it will copy entire function and keeps in memory.

//== check the value(a=10)
//=== check the value and it's type

var a="10";
console.log(a==10)
console.log(a===10)

undefined
--------------
Special value in Javascript which takes up memory space

Warning :  Never ever declare a variable undefined, because it is difficult 
to find value is 'undefined' because we set it or Javascript execution engineset it up.

Javascript follow Dynamic Typing:
-----------------------------------
You don't tell the engine what type of data a variable holds,
it figures out while your code running.

Strict Typing:
--------------
C# or java follows script Typing.

Premitive Types:
----------------------
Types of data that represent a single value is called Premitive data type.

1. undefined - this represent lack of existance (we should never use this)
2. null - this represent lack of existance (we can set a variable to this)
3. Boolean - true or false
4. number -  integer/floating type(decimal)
5. string -  a sequence of characters
6. Symbol - used in ES6

Anything which is not premitive is an Object in Javascript

Object
function
array
Date
RegularExpression

Functions:
-----------------

It is a block of code wrapped around flower brackets and invocated later.

function functionname(){

}

1. Regular Functions
2. Anonymous Functions
3. Immediately Invoked Functions(IIFS)

-> Function without any Name is called Anonymous function.

First Class Functions
-----------------------
- Can be Invoked
- Assign to a variable
- passed as a parameter to another variable

Advantages OF IIFS
----------------------
1. Will not create uncessary global variable and Functions
2. Function and Variable defined don't conflict.

Objects:
-------------
An Object is a collection of name value pairs.

1. Using New Object()
2. Using Object Literal{}
3. Using Object.create()
4. Construtor function

Object.create() method creates new object using an existing  object or null
as the prototype for created object.



var person = Object.create(null)// create an empty/null object
var person =  Object.create({})// create a normal function

JSON 
-------------
Javascript Object Notation

Inspired by the object literal Notation{}

XML
---------
<data>
<firstname>santanu</firstname>
<lastname>paikaray</lastname>
</data>

JSON
----------

{
    "firstname":"santanu",
    "lastname":"paikaray"
}
-Json makes our data light weight

JSON.stringify -  It converts a Javascript value into seriazlied string
When sending data to a webserver that data has to be string

Object:
----------
{
    firstname : "santanu",
    secondname : "paikaray"
}

properties have to be wrapped in quotes for JSON
Anything which is json valid in valid in object literal 

JSON.stringify - convert a Javascript value into seriazlied string
Json. Parser -  deserialzes a JSON string to a JSON object

Closure:
---------
Inner functions having access to the variable of outer functions.


Array:
---------
An Array is an object that can store a collection of items.

it Is useful when want to store a large amount of data.

var students = ["santanu","Sipun","Sandeep"]

var people = new Array("Santanu","Sipun","Sandeep")

In Javascript arrays are object Types with Special Construtor.

Array Index start from zero

Closure:
---------
Inner function having access to the variable of outer function.

Bind vs call vs apply
------------------------
Bind  :
---------
it creates a copy of that function and sets this keyword.

Call :
---------
Sets 'this' keyword and execute the function immediately and doesn't create a new copy of 
the function.

The call, bind and apply methods can be used to set 'this' keyword
independent of how function is called





apply :
-----------
sets 'this' keyword, similar to call but difference is apply accepts an array of
arguments instead comma seperated values.


Inheritance:
------------
One object get access to the properties and methods of another object.

In Javascript inheritance is supported by using prototype object.
this is also called prototypal inheritance.

Polymorphism:
----------------
It means function existing in many forms.

In Programming , The ability for object to present the same 
interface for different behaviour.

Error Handling:
---------------
It helps us to handle the error (runtime), for accessing undefined variables
or undefined functions.

try - catch - finally block

try{
    // code that may or may not throws error

}

catch{
    //code to be executed if error occours
}

finally{
    // code to be executed regardless of an error occours or not
}

Singleton Design Pattern:
--------------------------
It Limits the number of instnaces of a perticular object to just One. This is called
the Singleton.

Singletons are useful in stuations where system wide actions need to be coor
odinated from a single central place.

E.g Database Connection pool

The pool that manages the creation, destruction and lifetime of all database 
connection for the entire appliaction.

Module Pattern:
-----------------
Deals with code encapsulation. It is used to create private public properties.

Code encapsulation
-------------------
var person = function(){
    var name = 'Santanu'
}










